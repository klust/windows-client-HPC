{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Using Windows as a client and development platform for HPC \u00b6 Introduction Protocols and technolgoeis SSH Remote graphics Globus and GridFTP for file transfer Software All-in-one Command line access via SSH File transfer via sftp X server VNC clients NX clients Creating a Linux-like environment on Windows WSL and WSL2 CygWin Running a cluster software stack on Windows with EESSI Issues SSH key management Connecting to an X server in the Windows process space Securing an X server in the Windows process space Mapping users and groups between the Windows and WSL space Upgrading Linux in WSL","title":"Home"},{"location":"#using-windows-as-a-client-and-development-platform-for-hpc","text":"Introduction Protocols and technolgoeis SSH Remote graphics Globus and GridFTP for file transfer Software All-in-one Command line access via SSH File transfer via sftp X server VNC clients NX clients Creating a Linux-like environment on Windows WSL and WSL2 CygWin Running a cluster software stack on Windows with EESSI Issues SSH key management Connecting to an X server in the Windows process space Securing an X server in the Windows process space Mapping users and groups between the Windows and WSL space Upgrading Linux in WSL","title":"Using Windows as a client and development platform for HPC"},{"location":"0_00_introduction/","text":"Introduction \u00b6 Windows 10/11 rather than Linux as a client for a Linux-based HPC cluster? Yes, this is perfectly possible. It can even be done using mostly free software (besides of course Windows itself). Windows 10, especially in the editions launched in October 2019 and later, and Windows 11 contain many of the tools that you might need, though they are often hidden as additional components in the Windows installation or as apps in the Microsoft store. In fact, it is even perfectly possible to create a Linux or Linux-like environment on your Windows machine, which will give you the best of both worlds in a single machine and an easy environment to test your code, whether it is in an interpreted language such as Python or R, or a compiled language such as C, C++ or Fortran, on your PC on smaller problems before moving it to the HPC cluster. There are also tools that allow you to edit files on the cluster from your PC with an editor running on your PC. This is often preferable over the ancient text based editors on most clusters, or GUI programs that run very slowly over networks. Disclaimer: This is unofficial documentation and work-in-progress. It is the result of my work at the CalcUA service of the University of Antwerp for the Vlaams Supercomputer Centrum . However, as my main machine for work is macOS-based, this documentation is mostly written when I am working from home.","title":"Introduction"},{"location":"0_00_introduction/#introduction","text":"Windows 10/11 rather than Linux as a client for a Linux-based HPC cluster? Yes, this is perfectly possible. It can even be done using mostly free software (besides of course Windows itself). Windows 10, especially in the editions launched in October 2019 and later, and Windows 11 contain many of the tools that you might need, though they are often hidden as additional components in the Windows installation or as apps in the Microsoft store. In fact, it is even perfectly possible to create a Linux or Linux-like environment on your Windows machine, which will give you the best of both worlds in a single machine and an easy environment to test your code, whether it is in an interpreted language such as Python or R, or a compiled language such as C, C++ or Fortran, on your PC on smaller problems before moving it to the HPC cluster. There are also tools that allow you to edit files on the cluster from your PC with an editor running on your PC. This is often preferable over the ancient text based editors on most clusters, or GUI programs that run very slowly over networks. Disclaimer: This is unofficial documentation and work-in-progress. It is the result of my work at the CalcUA service of the University of Antwerp for the Vlaams Supercomputer Centrum . However, as my main machine for work is macOS-based, this documentation is mostly written when I am working from home.","title":"Introduction"},{"location":"1_ProtocolsTechnologies/","text":"Protocols and technologies \u00b6 SSH Remote graphics Globus and GridFTP for file transfer","title":"Protocols and technologies"},{"location":"1_ProtocolsTechnologies/#protocols-and-technologies","text":"SSH Remote graphics Globus and GridFTP for file transfer","title":"Protocols and technologies"},{"location":"1_ProtocolsTechnologies/1_01_SSH/","text":"Secure SHell (ssh) \u00b6 Secure SHell is the basis for a lot of connections. It can be used For telnet-style interactive shells For ftp-style data transfer For tunneling through a firewall and connecting to other network services running in the cluster.","title":"SSH"},{"location":"1_ProtocolsTechnologies/1_01_SSH/#secure-shell-ssh","text":"Secure SHell is the basis for a lot of connections. It can be used For telnet-style interactive shells For ftp-style data transfer For tunneling through a firewall and connecting to other network services running in the cluster.","title":"Secure SHell (ssh)"},{"location":"1_ProtocolsTechnologies/1_02_Remote_graphics/","text":"Remote graphics \u00b6 Several technologies in the Linux-world support remote graphics and all have clients that support Windows. X11 protocol: VNC NX-protocol","title":"Remote graphics"},{"location":"1_ProtocolsTechnologies/1_02_Remote_graphics/#remote-graphics","text":"Several technologies in the Linux-world support remote graphics and all have clients that support Windows. X11 protocol: VNC NX-protocol","title":"Remote graphics"},{"location":"1_ProtocolsTechnologies/1_03_Globus/","text":"Globus and GridFTP for file transfer \u00b6 Globus is the most popular implementation of the GridFTP protocol. This is a protocol that is optimized for large data transfers over high-latency connections that may even lack reliability. Globus data transfers happen between so-called endpoints. The endpoint software can be installed on big file servers -- and many supercomputer centers will offer a Globus endpoint to access your data there -- but there is also more feature-limited \"personal endpoint\" software to turn your desktop or laptop in a Globus endpoint. However, you don't need any specific software to initiate a data transfer between two endpoints. This is done via a web interface provided by the Globus service (globus.org). In this process, your actual data does not pass through the Globus.org servers nor through the computer on which you initiate the transfer but is transferred directly between the two end points. If connections get interrupted, data transfer will be restarted automatically when the connection is restored. So, among others, you can: Transfer data between a supercomputer and a file server on your department (provided both are Globus endpoints), initiating the transfer from your laptop or even smartphone. Ones the data transfer is initiated, there is no need to keep your laptop or smartphone connected as it is not directly involved in the data transfer. Transfer data between two supercomputers on which you have an account (which really is exactly the same case as the previous one). Transfer data to or from your laptop. In this case, you need to install personal endpoint software on your laptop and register it with the globus.org service. However, you can unplug your laptop from the network while the data transfer is going on. The data transfer will automatically resume when your laptop is on the network again. This makes this a lot more user-friendly technology to transfer large amounts of data than sftp, as sftp connections do not automatically restart when interrupted.","title":"Globus and GridFTP for file transfer"},{"location":"1_ProtocolsTechnologies/1_03_Globus/#globus-and-gridftp-for-file-transfer","text":"Globus is the most popular implementation of the GridFTP protocol. This is a protocol that is optimized for large data transfers over high-latency connections that may even lack reliability. Globus data transfers happen between so-called endpoints. The endpoint software can be installed on big file servers -- and many supercomputer centers will offer a Globus endpoint to access your data there -- but there is also more feature-limited \"personal endpoint\" software to turn your desktop or laptop in a Globus endpoint. However, you don't need any specific software to initiate a data transfer between two endpoints. This is done via a web interface provided by the Globus service (globus.org). In this process, your actual data does not pass through the Globus.org servers nor through the computer on which you initiate the transfer but is transferred directly between the two end points. If connections get interrupted, data transfer will be restarted automatically when the connection is restored. So, among others, you can: Transfer data between a supercomputer and a file server on your department (provided both are Globus endpoints), initiating the transfer from your laptop or even smartphone. Ones the data transfer is initiated, there is no need to keep your laptop or smartphone connected as it is not directly involved in the data transfer. Transfer data between two supercomputers on which you have an account (which really is exactly the same case as the previous one). Transfer data to or from your laptop. In this case, you need to install personal endpoint software on your laptop and register it with the globus.org service. However, you can unplug your laptop from the network while the data transfer is going on. The data transfer will automatically resume when your laptop is on the network again. This makes this a lot more user-friendly technology to transfer large amounts of data than sftp, as sftp connections do not automatically restart when interrupted.","title":"Globus and GridFTP for file transfer"},{"location":"2_Software/","text":"Software \u00b6 All-in-one Command line access via SSH File transfer via sftp X server VNC clients NX clients","title":"Software"},{"location":"2_Software/#software","text":"All-in-one Command line access via SSH File transfer via sftp X server VNC clients NX clients","title":"Software"},{"location":"2_Software/2_01_allInOne/","text":"All-in-one \u00b6 These are packages that provide terminal emulator functionality with support for ssh, support for file transfer over sftp, and an X server or other ways to run remote graphics. MobaXTerm is maybe the most popular package of this kind at the moment. It has a free version with some restrictions on the number of connections (and a big restriction in the license on support you can get from even just your local system managers) and a commercial version based on a subscription model. The package is so large and rich in functionality that it becomes confusing. E.g., ssh is support both via a built-in PuTTY (see below) and OpenSSH in the built-in CygWin Linux emulation layer (which also offers a built-in bash shell), but both use different key formats. However, it is very rich in supported protocols. E.g., it also supports remote display connections via VNC or RDP. Recent versions can also be used as a terminal emulator to run WSL (Windows Subsystem for Linux) sessions. WinSSHTerm : This package is far less complete as MobaXTerm and requires external packages to work. It essentially combines the PuTTY/KiTTY ssh/terminal emulator, WinSCP file transfer tool and VcXsrv X server.","title":"All-in-one"},{"location":"2_Software/2_01_allInOne/#all-in-one","text":"These are packages that provide terminal emulator functionality with support for ssh, support for file transfer over sftp, and an X server or other ways to run remote graphics. MobaXTerm is maybe the most popular package of this kind at the moment. It has a free version with some restrictions on the number of connections (and a big restriction in the license on support you can get from even just your local system managers) and a commercial version based on a subscription model. The package is so large and rich in functionality that it becomes confusing. E.g., ssh is support both via a built-in PuTTY (see below) and OpenSSH in the built-in CygWin Linux emulation layer (which also offers a built-in bash shell), but both use different key formats. However, it is very rich in supported protocols. E.g., it also supports remote display connections via VNC or RDP. Recent versions can also be used as a terminal emulator to run WSL (Windows Subsystem for Linux) sessions. WinSSHTerm : This package is far less complete as MobaXTerm and requires external packages to work. It essentially combines the PuTTY/KiTTY ssh/terminal emulator, WinSCP file transfer tool and VcXsrv X server.","title":"All-in-one"},{"location":"2_Software/2_02_CLI_SSH/","text":"Command line access via ssh \u00b6 There are two ways to gain command line access to supercomputers through ssh: Use terminal software with built-in ssh support Use regular terminal software that gives you a shell on Windows (PowerShell, CygWin shell or a Windows Subsystem for Linux shell, see also the section on creating a linux-like environment on Windows) with a linux-style SSH client. Recent versions of Windows bundle a native Windows implementation of the OpenSSH client that can be run from PowerShell or any other shell that supports running native Windows applications. Terminal emulation with built-in SSH support \u00b6 PuTTY has long been the most popular terminal emulation package of this type. The package is showing its age though and isn't really developed anymore except for security updates. It also comes with some tools for file transfer over sftp, but there is much better software for that purpose. The package is free though.\\ PuTTY has seen several forks into packages that extend PuTTY in one way or another. The best known one is probably KiTTY , with many tiny improvements, including the option to follow hyperlinks from the terminal. Bitvise SSH client is another SSH client that has some popularity. It also includes support for sftp. However, this list and the next one on terminal emulators are far from complete. There are several other commercial and free options. Terminal emulation without SSH support \u00b6 Windows supports several environments with OpenSSH clients: its own PowerShell that can use a Windows native OpenSSH implementation included in recent versions of Windows 10, CygWin, and Linux-distributions running in WSL 1 or WSL 2 (Windows Subsystem for Linux). To work comfortable, you'll still need a proper terminal emulation program as the ancient console window provided by Windows really isn't full-featured and doesn't benefit from features introduced in Windows 10 1809 (the ConPTY API). Some terminal emulators for Windows are: Windows Terminal: This is Microsoft's own terminal program and is 100% free. It can be found in the Windows Store, and is in fact the standard terminal for PowerShell on Windows 11. Initial versions were tricky to customize, requiring editing a json file, but from April 2020 on the program should also have a GUI for changing most settings. It makes full use of the improved support in Windows itself for UNIX-style terminals from May 2019 on. While it was initially very rough around the edges, with those improvements it is probably the terminal emulator to go for to have access to any shell on your Windows system and make ssh connections from there. In fact, using the built-in OpenSSH client from Windows it is even possible to open sessions directly on your favourite cluster by using ssh as the command to start a session. ConEmu : A long-time popular terminal, though at this writing (early 2021) it doesn't seem as easy to use with WSL as the Windows Terminal (which will detect your WSL distributions automatically).","title":"CLI via SSH"},{"location":"2_Software/2_02_CLI_SSH/#command-line-access-via-ssh","text":"There are two ways to gain command line access to supercomputers through ssh: Use terminal software with built-in ssh support Use regular terminal software that gives you a shell on Windows (PowerShell, CygWin shell or a Windows Subsystem for Linux shell, see also the section on creating a linux-like environment on Windows) with a linux-style SSH client. Recent versions of Windows bundle a native Windows implementation of the OpenSSH client that can be run from PowerShell or any other shell that supports running native Windows applications.","title":"Command line access via ssh"},{"location":"2_Software/2_02_CLI_SSH/#terminal-emulation-with-built-in-ssh-support","text":"PuTTY has long been the most popular terminal emulation package of this type. The package is showing its age though and isn't really developed anymore except for security updates. It also comes with some tools for file transfer over sftp, but there is much better software for that purpose. The package is free though.\\ PuTTY has seen several forks into packages that extend PuTTY in one way or another. The best known one is probably KiTTY , with many tiny improvements, including the option to follow hyperlinks from the terminal. Bitvise SSH client is another SSH client that has some popularity. It also includes support for sftp. However, this list and the next one on terminal emulators are far from complete. There are several other commercial and free options.","title":"Terminal emulation with built-in SSH support"},{"location":"2_Software/2_02_CLI_SSH/#terminal-emulation-without-ssh-support","text":"Windows supports several environments with OpenSSH clients: its own PowerShell that can use a Windows native OpenSSH implementation included in recent versions of Windows 10, CygWin, and Linux-distributions running in WSL 1 or WSL 2 (Windows Subsystem for Linux). To work comfortable, you'll still need a proper terminal emulation program as the ancient console window provided by Windows really isn't full-featured and doesn't benefit from features introduced in Windows 10 1809 (the ConPTY API). Some terminal emulators for Windows are: Windows Terminal: This is Microsoft's own terminal program and is 100% free. It can be found in the Windows Store, and is in fact the standard terminal for PowerShell on Windows 11. Initial versions were tricky to customize, requiring editing a json file, but from April 2020 on the program should also have a GUI for changing most settings. It makes full use of the improved support in Windows itself for UNIX-style terminals from May 2019 on. While it was initially very rough around the edges, with those improvements it is probably the terminal emulator to go for to have access to any shell on your Windows system and make ssh connections from there. In fact, using the built-in OpenSSH client from Windows it is even possible to open sessions directly on your favourite cluster by using ssh as the command to start a session. ConEmu : A long-time popular terminal, though at this writing (early 2021) it doesn't seem as easy to use with WSL as the Windows Terminal (which will detect your WSL distributions automatically).","title":"Terminal emulation without SSH support"},{"location":"2_Software/2_03_SFTP/","text":"File transfer clients for sftp \u00b6 FileZilla WinSCP","title":"SFTP file transfer"},{"location":"2_Software/2_03_SFTP/#file-transfer-clients-for-sftp","text":"FileZilla WinSCP","title":"File transfer clients for sftp"},{"location":"2_Software/2_04_Xserver/","text":"X servers \u00b6 This section is only relevant if you use Windows 10 as Windows 11 contains support for X in WSL (dubbed WSLg). Windows 11 will render the image in the Linux server and push the image to the Windows screen via the Remote Display Protocol, but also include features to support OpenGL acceleration on the graphics card if a compatible Windows display driver is used. However, you can still use an X server running in the Windows space of course, especially if you want to avoid using WSL, and in that case the text below is still relevant. In the past, there were several commercial X servers that offered much better performance than the freely available ones. These however have lost popularity, especially when the server running the X applications is not on the same very fast network, as the limited network bandwidth and higher latency of longer network connections obliterate any speed advantage over the free alternatives (though some might still offer more functionality). There are several X servers that are all derived from the X.org code base. Packaging those to run on Windows does require some effort from the developers of these packages, so some of the options below request a minor fee or donation to compensate for that effort. Cygwin/X . Cygwin is a technology that offers a lot of Linux-functionality on top of Windows. This technology is discussed elsewhere. It also comes with an X server derived from the X.org code base. However, as one also needs to install the Cygwin system before being able to install the X server, it does require some more effort from the user than the other options given below. It is however entirely free. MobaTek MobaXterm : This product was already discussed before. It's X-server is also based on the X.org sources and in fact relies on the built-in Cygwin. However, due to the integration in MobaXterm the interface is a bit more polished. The MobaXterm does support the GLX extension, but it is not clear if it is hardware accelerated or just a software OpenGL emulation. Recent versions integrate nicely with WSL also (tested with WSL2) and set the DISPLAY environment variable correctly so that you can start X programs in your WSL sessions started from MobaXterm. TODO: TEST ON A CLEAN MACHINE AS IT MAY PICK UP A VARIABLE SET BY GWSL. GWSL : This free X server installs from the Microsoft Store which makes it extremely easy to install and gives you automatic updates. It is based on VcXsrv, the next one in this list, but installs from the Windows store. It has a feature to ensure that each WSL session starts with the display variable set properly and a simple tool to create shortcuts to WSL graphical apps to start them at the click of a button. GWSL does support the GLX 1.4 extension, but it is not clear if it is hardware accelerated or just a software OpenGL emulation. Like all X servers further down in the list, it is basically the work of a single person so there is no guarantee that the work will continue and limited support.\\ A big disadvantage of this X server is that it runs with access control disabled, allowing all computers on the network to access the X server unless the firewall on your machine stops the applications from doing so. But tuning the firewall to only let traffic from the WSL virtual machine pass is no easy feat, also because the feature that sets the DISPLAY variable doesn't use the internal virtual connection. It may be a good enough X server to use at home but it should not be used in public spaces or on, e.g., a university network. VcXsrv : This X server runs independently from the Cygwin libraries. It relies on an older version of the Microsoft compilers and some included libraries that make Cygwin unnecessary. It is installed through a regular Windows installer. Xming X Server : This is another server that can run independently from Cygwin. While VcXsrv uses the Microsoft compilers, the author of Xming relies on a port of the GNU compiler collection (though of course you don't need to have those compilers installed). It consists of two components: the actual X server and a package with additional fonts. The server is donationware (a minimum of 10 GBP will give you access to new versions for a year), though an older version is available entirely free. The donationware version does support the GLX extension. For the free versions, there is a download with (the -mesa version) and without GLX, but the GLX support is very outdated (GLX 1.2) given that the free version is essentially the 2007 version of Xming. It is installed through a regular Windows installer. Xming works nicely with WSL1 as you can simply set the DISPLAY variable to localhost but is a bit more tricky to use with WSL2, which runs in a virtual machine and hence doesn't share localhost with Windows. You'll have to start Xming with access control disabled (using the -ac command line option) and set the DISPLAY environment variable in your WSL2 session with export DISPLAY=\\$(cat /etc/resolv.conf | grep nameserver | awk \\'{print \\$2; exit;}\\'):0 which is a trick that works with the other X servers also. X410 : This is a port of the X.org X-server solely for Windows 10 and packaged as a Windows Store app, making it extremely easy to install and uninstall. It has a free time-limited test version but afterwards it costs around 10 or 15 EURO (well, the store claims it costs 49.99 EURO, but I've always seen the reduced price of 14.99 EURO and at one point even 9.99 EURO). It is also fully independent of the Cygwin libraries, which may make it an excellent partner to use with Windows Terminal which is also a Microsoft Store app. Other free or nearly free X-servers: MicroImages MI/X : Previously a commercial offering offered as part of their GIS software, but now made freely available. However, as this is based on a very old version of X we advise against its use. It is likely incompatible with many recent X packages. In case you really want to go for a commercial offering, these are some of the options: Micro-Focus Reflection Desktop for X and Reflection Desktop Pro OpenText Exceed and Exceed 3D (formerly Hummingbird Exceed): StarNet X-Win32 PTC X/Server . This vendor also makes a Linux interoperability software layer (similar to Cygwin) for Windows. Many of the commercial offerings include the GLX extension for OpenGL software (or offer it for an additional fee) which is a feature not offered by all free servers, but it is not clear if their implementation is better than in the free servers that support the extension (e.g., by offering full hardware acceleration). Note that we have no recent experience with any of these commercial products.","title":"X server"},{"location":"2_Software/2_04_Xserver/#x-servers","text":"This section is only relevant if you use Windows 10 as Windows 11 contains support for X in WSL (dubbed WSLg). Windows 11 will render the image in the Linux server and push the image to the Windows screen via the Remote Display Protocol, but also include features to support OpenGL acceleration on the graphics card if a compatible Windows display driver is used. However, you can still use an X server running in the Windows space of course, especially if you want to avoid using WSL, and in that case the text below is still relevant. In the past, there were several commercial X servers that offered much better performance than the freely available ones. These however have lost popularity, especially when the server running the X applications is not on the same very fast network, as the limited network bandwidth and higher latency of longer network connections obliterate any speed advantage over the free alternatives (though some might still offer more functionality). There are several X servers that are all derived from the X.org code base. Packaging those to run on Windows does require some effort from the developers of these packages, so some of the options below request a minor fee or donation to compensate for that effort. Cygwin/X . Cygwin is a technology that offers a lot of Linux-functionality on top of Windows. This technology is discussed elsewhere. It also comes with an X server derived from the X.org code base. However, as one also needs to install the Cygwin system before being able to install the X server, it does require some more effort from the user than the other options given below. It is however entirely free. MobaTek MobaXterm : This product was already discussed before. It's X-server is also based on the X.org sources and in fact relies on the built-in Cygwin. However, due to the integration in MobaXterm the interface is a bit more polished. The MobaXterm does support the GLX extension, but it is not clear if it is hardware accelerated or just a software OpenGL emulation. Recent versions integrate nicely with WSL also (tested with WSL2) and set the DISPLAY environment variable correctly so that you can start X programs in your WSL sessions started from MobaXterm. TODO: TEST ON A CLEAN MACHINE AS IT MAY PICK UP A VARIABLE SET BY GWSL. GWSL : This free X server installs from the Microsoft Store which makes it extremely easy to install and gives you automatic updates. It is based on VcXsrv, the next one in this list, but installs from the Windows store. It has a feature to ensure that each WSL session starts with the display variable set properly and a simple tool to create shortcuts to WSL graphical apps to start them at the click of a button. GWSL does support the GLX 1.4 extension, but it is not clear if it is hardware accelerated or just a software OpenGL emulation. Like all X servers further down in the list, it is basically the work of a single person so there is no guarantee that the work will continue and limited support.\\ A big disadvantage of this X server is that it runs with access control disabled, allowing all computers on the network to access the X server unless the firewall on your machine stops the applications from doing so. But tuning the firewall to only let traffic from the WSL virtual machine pass is no easy feat, also because the feature that sets the DISPLAY variable doesn't use the internal virtual connection. It may be a good enough X server to use at home but it should not be used in public spaces or on, e.g., a university network. VcXsrv : This X server runs independently from the Cygwin libraries. It relies on an older version of the Microsoft compilers and some included libraries that make Cygwin unnecessary. It is installed through a regular Windows installer. Xming X Server : This is another server that can run independently from Cygwin. While VcXsrv uses the Microsoft compilers, the author of Xming relies on a port of the GNU compiler collection (though of course you don't need to have those compilers installed). It consists of two components: the actual X server and a package with additional fonts. The server is donationware (a minimum of 10 GBP will give you access to new versions for a year), though an older version is available entirely free. The donationware version does support the GLX extension. For the free versions, there is a download with (the -mesa version) and without GLX, but the GLX support is very outdated (GLX 1.2) given that the free version is essentially the 2007 version of Xming. It is installed through a regular Windows installer. Xming works nicely with WSL1 as you can simply set the DISPLAY variable to localhost but is a bit more tricky to use with WSL2, which runs in a virtual machine and hence doesn't share localhost with Windows. You'll have to start Xming with access control disabled (using the -ac command line option) and set the DISPLAY environment variable in your WSL2 session with export DISPLAY=\\$(cat /etc/resolv.conf | grep nameserver | awk \\'{print \\$2; exit;}\\'):0 which is a trick that works with the other X servers also. X410 : This is a port of the X.org X-server solely for Windows 10 and packaged as a Windows Store app, making it extremely easy to install and uninstall. It has a free time-limited test version but afterwards it costs around 10 or 15 EURO (well, the store claims it costs 49.99 EURO, but I've always seen the reduced price of 14.99 EURO and at one point even 9.99 EURO). It is also fully independent of the Cygwin libraries, which may make it an excellent partner to use with Windows Terminal which is also a Microsoft Store app. Other free or nearly free X-servers: MicroImages MI/X : Previously a commercial offering offered as part of their GIS software, but now made freely available. However, as this is based on a very old version of X we advise against its use. It is likely incompatible with many recent X packages. In case you really want to go for a commercial offering, these are some of the options: Micro-Focus Reflection Desktop for X and Reflection Desktop Pro OpenText Exceed and Exceed 3D (formerly Hummingbird Exceed): StarNet X-Win32 PTC X/Server . This vendor also makes a Linux interoperability software layer (similar to Cygwin) for Windows. Many of the commercial offerings include the GLX extension for OpenGL software (or offer it for an additional fee) which is a feature not offered by all free servers, but it is not clear if their implementation is better than in the free servers that support the extension (e.g., by offering full hardware acceleration). Note that we have no recent experience with any of these commercial products.","title":"X servers"},{"location":"2_Software/2_05_VNC/","text":"VNC \u00b6","title":"VNC clients"},{"location":"2_Software/2_05_VNC/#vnc","text":"","title":"VNC"},{"location":"2_Software/2_06_NX/","text":"NX \u00b6","title":"NX clients"},{"location":"2_Software/2_06_NX/#nx","text":"","title":"NX"},{"location":"3_LinuxOnWin/","text":"Creating a linux-like environment on Windows \u00b6 WSL and WSL2 CygWin","title":"Creating a linux-like environment on Windows"},{"location":"3_LinuxOnWin/#creating-a-linux-like-environment-on-windows","text":"WSL and WSL2 CygWin","title":"Creating a linux-like environment on Windows"},{"location":"3_LinuxOnWin/3_01_WSL/","text":"WSL and WSL 2 \u00b6","title":"WSL and WSL2"},{"location":"3_LinuxOnWin/3_01_WSL/#wsl-and-wsl-2","text":"","title":"WSL and WSL 2"},{"location":"3_LinuxOnWin/3_02_CygWin/","text":"CygWin \u00b6","title":"CygWin"},{"location":"3_LinuxOnWin/3_02_CygWin/#cygwin","text":"","title":"CygWin"},{"location":"4_EESSI/","text":"Running a cluster software stack on Windows with EESSI \u00b6 Yes, it is possible to run a typical HPC cluster stack on Windows in a WSL Linux virtual machine. There is a freely available software stack made available by the EESSI project which at the time of writing this part of this text (March 2021) is still in pilot phase with very limited program support. The goal of EESSI is to make a full software stack available via the so-called CernVM-FS file system which implements a read-only network file system based on web technology that is ideal to distribute software. The downside is that it is pretty hard to set up and that it does require some manual intervention on Windows to start each time Windows is rebooted or the WSL virtual machine is killed for any other reason as WSL does not yet provide the necessary support to auto-start the needed services. However, you need to install very little software locally while a new software stack will become available automatically and periodically. TODO: Instructions.","title":"Cluster software stack on Windows"},{"location":"4_EESSI/#running-a-cluster-software-stack-on-windows-with-eessi","text":"Yes, it is possible to run a typical HPC cluster stack on Windows in a WSL Linux virtual machine. There is a freely available software stack made available by the EESSI project which at the time of writing this part of this text (March 2021) is still in pilot phase with very limited program support. The goal of EESSI is to make a full software stack available via the so-called CernVM-FS file system which implements a read-only network file system based on web technology that is ideal to distribute software. The downside is that it is pretty hard to set up and that it does require some manual intervention on Windows to start each time Windows is rebooted or the WSL virtual machine is killed for any other reason as WSL does not yet provide the necessary support to auto-start the needed services. However, you need to install very little software locally while a new software stack will become available automatically and periodically. TODO: Instructions.","title":"Running a cluster software stack on Windows with EESSI"},{"location":"5_Issues/","text":"Issues \u00b6 SSH key management Connecting to an X server in the Windows process space Securing an X server in the Windows process space Mapping users and groups between the Windows and WSL space Upgrading Linux in WSL","title":"Issues"},{"location":"5_Issues/#issues","text":"SSH key management Connecting to an X server in the Windows process space Securing an X server in the Windows process space Mapping users and groups between the Windows and WSL space Upgrading Linux in WSL","title":"Issues"},{"location":"5_Issues/5_01_SSH_key_management/","text":"SSH key management \u00b6 Using the Windows SSH agent \u00b6 Windows does come with a ssh key agent service. However, in recent versions of Windows 10, it is disabled by default. To enable it, Open the \"Services\" app in administrator mode Look for \"OpenSSH Authentication Agent\" in the list of services and right-click to open the \"Properties\" dialog box. Make sure the startup-type is set to \"automatic\" which will ensure that the service will start the next time Windows is booted. It should also be possible to start the service now from the same dialog box. Keys can then be added from PowerShell using the regular \"ssh-add\"-command. There is a caveat however. The ssh agent service is not found from WSL. Solutions: WSL 1: A piece of software called \" wsl-ssh-agent \" can be used to connect WSL 1 sessions to the ssh agent service in Windows. WSL 2: Here a different approach has to be taken, using socat (which you may need to install in your Linux distribution) and a Windows program, npiperelay.exe , that needs to be installed on a Windows file system (as Windows must be able to run the program).\\ This should be set up in your .bash_profile or .bashrc (I do so in .bash_profile as that is the typical place to set environment variables): export SSH_AUTH_SOCK = /home/ $USER /.agent.sock. $WSL_DISTRO_NAME ss -a | grep -q $SSH_AUTH_SOCK if [ $? -ne 0 ] ; then rm -f $SSH_AUTH_SOCK ( setsid socat UNIX-LISTEN: $SSH_AUTH_SOCK ,fork EXEC: \" $HOME /.wsl/npiperelay.exe -ei -s //./pipe/openssh-ssh-agent\" ,nofork & ) >/dev/null 2 > & 1 fi There are a few caveats: SSH_AUTH_SOCK points to the socket that will be used to communicate with the ssh agent. In most WSL distributions, this should be on an internal Linux file system. So in case you use your Windows home directory also as the home directory in your WSL distribution, you should not put the socket there. This is why /home/$USER is used rather than $HOME . Also, if you have multiple Linux distributions in WSL, it is important that the socket has a different name for each distribution as otherwise one distribution will try to talk to a socket in a different distribution. At first this may seem possible since all distributions run in the same virtual machine, but they have different user spaces so that does not work. The second line tests if there is already an socat process managing that socket. The crucial line is the setsid socat line: The Windows ssh agent works with Windows named pipes, and WSL2 programs cannot directly talk to those. This is where npiperelay.exe comes in. It acts as the translator between Linux sockets and the Windows named pipe. The socat process listens at the Linux site. Whenever ssh contacts the socket, it starts npiperelay.exe to talk to the Windows named pipe. The npiperelay.exe process is started with options that will terminate it after the command from the ssh process. The path specified for the npiperelay.exe command is the path as seen by the Linux distribution. The setsid command is used to start it in a separate session so that it continues running if the current Linux session is terminated, to be picked up again when you start a new shell in that distribution. At the moment of writing, this process was tested and works in Fedora 35, OpenSUSE 15 SP3 and Ubuntu 20.4.3 LTS. Some good sources of information on this procedure: The wsl-ssh-agent github mentions it as the alternative for WSL2. \"Forwarding SSH agent requests from WSL to Windows\" on stuartleeks.com is a slightly more complicated version of this procedure that prevents accidentally starting more socat processes than needed. \"Using SSH on Windows 10 and WSL 2\" on markramige.com is a page that explains the whole process of setting up the Windows OpenSSH implementation and integrating it with WSL. Key permissions-related problems \u00b6 Ubuntu 20.4 has problems using key files symlinked on a regular Windows file system. It shows when an IdentityFile line with IdentitiesOnly is added to the .ssh/config file for the host and the key that is used there is a symbolic link to the actual key. And this in turn seems to be related to a permissions problem in WSL2 when using a Windows file system: It is not possible to set the permissions on the links themselves to 700 while that seems to be needed for the Ubuntu ssh client (according to a web search on possible causes). In general, the mapping between users and groups on the WSL2 side and on the Windows side seems to differ between distributions and can be the cause of problems.","title":"SSH key management"},{"location":"5_Issues/5_01_SSH_key_management/#ssh-key-management","text":"","title":"SSH key management"},{"location":"5_Issues/5_01_SSH_key_management/#using-the-windows-ssh-agent","text":"Windows does come with a ssh key agent service. However, in recent versions of Windows 10, it is disabled by default. To enable it, Open the \"Services\" app in administrator mode Look for \"OpenSSH Authentication Agent\" in the list of services and right-click to open the \"Properties\" dialog box. Make sure the startup-type is set to \"automatic\" which will ensure that the service will start the next time Windows is booted. It should also be possible to start the service now from the same dialog box. Keys can then be added from PowerShell using the regular \"ssh-add\"-command. There is a caveat however. The ssh agent service is not found from WSL. Solutions: WSL 1: A piece of software called \" wsl-ssh-agent \" can be used to connect WSL 1 sessions to the ssh agent service in Windows. WSL 2: Here a different approach has to be taken, using socat (which you may need to install in your Linux distribution) and a Windows program, npiperelay.exe , that needs to be installed on a Windows file system (as Windows must be able to run the program).\\ This should be set up in your .bash_profile or .bashrc (I do so in .bash_profile as that is the typical place to set environment variables): export SSH_AUTH_SOCK = /home/ $USER /.agent.sock. $WSL_DISTRO_NAME ss -a | grep -q $SSH_AUTH_SOCK if [ $? -ne 0 ] ; then rm -f $SSH_AUTH_SOCK ( setsid socat UNIX-LISTEN: $SSH_AUTH_SOCK ,fork EXEC: \" $HOME /.wsl/npiperelay.exe -ei -s //./pipe/openssh-ssh-agent\" ,nofork & ) >/dev/null 2 > & 1 fi There are a few caveats: SSH_AUTH_SOCK points to the socket that will be used to communicate with the ssh agent. In most WSL distributions, this should be on an internal Linux file system. So in case you use your Windows home directory also as the home directory in your WSL distribution, you should not put the socket there. This is why /home/$USER is used rather than $HOME . Also, if you have multiple Linux distributions in WSL, it is important that the socket has a different name for each distribution as otherwise one distribution will try to talk to a socket in a different distribution. At first this may seem possible since all distributions run in the same virtual machine, but they have different user spaces so that does not work. The second line tests if there is already an socat process managing that socket. The crucial line is the setsid socat line: The Windows ssh agent works with Windows named pipes, and WSL2 programs cannot directly talk to those. This is where npiperelay.exe comes in. It acts as the translator between Linux sockets and the Windows named pipe. The socat process listens at the Linux site. Whenever ssh contacts the socket, it starts npiperelay.exe to talk to the Windows named pipe. The npiperelay.exe process is started with options that will terminate it after the command from the ssh process. The path specified for the npiperelay.exe command is the path as seen by the Linux distribution. The setsid command is used to start it in a separate session so that it continues running if the current Linux session is terminated, to be picked up again when you start a new shell in that distribution. At the moment of writing, this process was tested and works in Fedora 35, OpenSUSE 15 SP3 and Ubuntu 20.4.3 LTS. Some good sources of information on this procedure: The wsl-ssh-agent github mentions it as the alternative for WSL2. \"Forwarding SSH agent requests from WSL to Windows\" on stuartleeks.com is a slightly more complicated version of this procedure that prevents accidentally starting more socat processes than needed. \"Using SSH on Windows 10 and WSL 2\" on markramige.com is a page that explains the whole process of setting up the Windows OpenSSH implementation and integrating it with WSL.","title":"Using the Windows SSH agent"},{"location":"5_Issues/5_01_SSH_key_management/#key-permissions-related-problems","text":"Ubuntu 20.4 has problems using key files symlinked on a regular Windows file system. It shows when an IdentityFile line with IdentitiesOnly is added to the .ssh/config file for the host and the key that is used there is a symbolic link to the actual key. And this in turn seems to be related to a permissions problem in WSL2 when using a Windows file system: It is not possible to set the permissions on the links themselves to 700 while that seems to be needed for the Ubuntu ssh client (according to a web search on possible causes). In general, the mapping between users and groups on the WSL2 side and on the Windows side seems to differ between distributions and can be the cause of problems.","title":"Key permissions-related problems"},{"location":"5_Issues/5_02_Connecting_WinX/","text":"Connecting to an X server in the Windows process space \u00b6 This section is irrelevant if you are using the X server in the WSL subsystem in Windows 10 21H2 or later or Windows 11. TODO","title":"Connecting to an X server in the Windows process space"},{"location":"5_Issues/5_02_Connecting_WinX/#connecting-to-an-x-server-in-the-windows-process-space","text":"This section is irrelevant if you are using the X server in the WSL subsystem in Windows 10 21H2 or later or Windows 11. TODO","title":"Connecting to an X server in the Windows process space"},{"location":"5_Issues/5_03_SecureX/","text":"Securing an X server in the Windows process space \u00b6 The best way of course if you only want access to the X server from programs running on your PC, is to limit access to the X server via firewall software. How this should be done depends on the firewall that you are using. One problem is that if you are using WSL2, you need to ensure access from the virtual interface of the WSL2 virtual machine, which is in the 172.16.0.0/12 range (or maybe even always in the 172.31.0.0/16 range). An easy way to limit the access is via the xhost command, which you would need to install in your Linux distribution. On the machine on which we tested we found the following to work from CygWin and three different Linux distributions (Fedora, openSUSE and Ubuntu): xhost + $HOSTNAME .mshome.net +localhost - The \" +$HOSTNAME.mshome.net \" grants access to the virtual interface of the WSL2 virtual machine (and is not needed on WSL1), the \"+localhost\" grants access to local X11 programs (important for CygWin and WSL1) and the \"-\" denies access to everyone else.","title":"Securing an X server in the Windows process space"},{"location":"5_Issues/5_03_SecureX/#securing-an-x-server-in-the-windows-process-space","text":"The best way of course if you only want access to the X server from programs running on your PC, is to limit access to the X server via firewall software. How this should be done depends on the firewall that you are using. One problem is that if you are using WSL2, you need to ensure access from the virtual interface of the WSL2 virtual machine, which is in the 172.16.0.0/12 range (or maybe even always in the 172.31.0.0/16 range). An easy way to limit the access is via the xhost command, which you would need to install in your Linux distribution. On the machine on which we tested we found the following to work from CygWin and three different Linux distributions (Fedora, openSUSE and Ubuntu): xhost + $HOSTNAME .mshome.net +localhost - The \" +$HOSTNAME.mshome.net \" grants access to the virtual interface of the WSL2 virtual machine (and is not needed on WSL1), the \"+localhost\" grants access to local X11 programs (important for CygWin and WSL1) and the \"-\" denies access to everyone else.","title":"Securing an X server in the Windows process space"},{"location":"5_Issues/5_04_Mapping_users/","text":"Mapping users and groups between the Windows and WSL space \u00b6 Users and groups seem to be mapped differently on WSL users and groups depending on the distribution and this may cause problems for accesses to files that are sensitive to permissions, e.g., access to ssh keys. TODO","title":"Mapping users and groups between the Windows and WSL space"},{"location":"5_Issues/5_04_Mapping_users/#mapping-users-and-groups-between-the-windows-and-wsl-space","text":"Users and groups seem to be mapped differently on WSL users and groups depending on the distribution and this may cause problems for accesses to files that are sensitive to permissions, e.g., access to ssh keys. TODO","title":"Mapping users and groups between the Windows and WSL space"},{"location":"5_Issues/5_05_Upgrading_Linux/","text":"Upgrading Linux in WSL \u00b6 Ubuntu \u00b6 It is best to first make sure that your current Ubuntu is up-to-date: sudo apt update sudo apt full-upgrade You can optionally add the -y command line flag to the last command to automatically assume the answer \"yes\" to all questions asked during the process. The apt update command downloads package information from all configured sources that is used by other apt commands. The apt full-upgrade command install available upgrades of all packages currently installed on the system, installs new ones as required but also removes currently installed packages if this is needed to upgrade the system as a whole. It may be a good moment for some clean-up: sudo apt --purge autoremove This command will remove packages that were automatically installed to satisfy dependencies for other packages and are now no longer needed as dependencies changed or the package(s) needing them were removed in the meantime. It may remove more than you like though as some software that came in as a dependency of explicitly installed packages may still be used by itself. See the manual pages of the apt command on how to deal with this. The actual release policy is set in /etc/update-manager/release-upgrades . Edit this file (using an editor via the sudo command) to change the policy if desired. If Ubuntu was installed via the Windows store, this should be set to only installing LTS versions, but you can change this at your own risk. To initiate the actual upgrade, run sudo do -release-upgrade -d The -d option (which tells to use the latest development release) turned out to be essential though many sources don't mention it. Without it the do-release-upgrade command failed to recognise that there was a new version of Ubuntu available when I tested the procedure. It might be because I tested too early. The new release of Ubuntu was already available in the Windows store but it might not have been marked yet for general distribution via the upgrade mechanism. (See also the do-release-upgrade manual page ) You will be asked a few questions during the process about how to proceed. y is most of the time a suitable answer. Note that on WSL2 (and I guess WSL also) you will see an error message when Ubuntu tries to restart at the end of the process as the Linux infrastructure that is used for that is not supported on WSL/WSL2. You'll have to leave all Ubuntu sessions and it may even be a good idea to simply restart Windows.","title":"Upgrading Linux in WSL"},{"location":"5_Issues/5_05_Upgrading_Linux/#upgrading-linux-in-wsl","text":"","title":"Upgrading Linux in WSL"},{"location":"5_Issues/5_05_Upgrading_Linux/#ubuntu","text":"It is best to first make sure that your current Ubuntu is up-to-date: sudo apt update sudo apt full-upgrade You can optionally add the -y command line flag to the last command to automatically assume the answer \"yes\" to all questions asked during the process. The apt update command downloads package information from all configured sources that is used by other apt commands. The apt full-upgrade command install available upgrades of all packages currently installed on the system, installs new ones as required but also removes currently installed packages if this is needed to upgrade the system as a whole. It may be a good moment for some clean-up: sudo apt --purge autoremove This command will remove packages that were automatically installed to satisfy dependencies for other packages and are now no longer needed as dependencies changed or the package(s) needing them were removed in the meantime. It may remove more than you like though as some software that came in as a dependency of explicitly installed packages may still be used by itself. See the manual pages of the apt command on how to deal with this. The actual release policy is set in /etc/update-manager/release-upgrades . Edit this file (using an editor via the sudo command) to change the policy if desired. If Ubuntu was installed via the Windows store, this should be set to only installing LTS versions, but you can change this at your own risk. To initiate the actual upgrade, run sudo do -release-upgrade -d The -d option (which tells to use the latest development release) turned out to be essential though many sources don't mention it. Without it the do-release-upgrade command failed to recognise that there was a new version of Ubuntu available when I tested the procedure. It might be because I tested too early. The new release of Ubuntu was already available in the Windows store but it might not have been marked yet for general distribution via the upgrade mechanism. (See also the do-release-upgrade manual page ) You will be asked a few questions during the process about how to proceed. y is most of the time a suitable answer. Note that on WSL2 (and I guess WSL also) you will see an error message when Ubuntu tries to restart at the end of the process as the Linux infrastructure that is used for that is not supported on WSL/WSL2. You'll have to leave all Ubuntu sessions and it may even be a good idea to simply restart Windows.","title":"Ubuntu"}]}